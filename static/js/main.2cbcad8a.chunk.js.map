{"version":3,"sources":["web3.js","lottery.js","App.jsx","reportWebVitals.js","index.js"],"names":["web3","Web3","window","ethereum","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","useState","manager","setManager","players","setPlayers","balance","setBalance","value","setValue","walletConnected","setWalletConnected","message","setMessage","handleSubmit","event","a","preventDefault","getAccounts","accounts","lottery","methods","enter","send","from","utils","toWei","handleClick","pickWinner","connectWallet","request","method","items","header","description","fluid","length","fromWei","useEffect","checkIfWalletConnected","fetchData","call","fetchedManager","getPlayers","fetchedPlayers","getBalance","options","address","fetchedBalance","Container","Menu","widths","Item","Card","Group","Divider","Form","onSubmit","Field","Header","size","onChange","target","Button","primary","onClick","color","Message","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cbcad8a.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nconst web3 = new Web3(window.ethereum);\r\n\r\nexport default web3;\r\n","import web3 from \"./web3\";\r\n\r\nconst address = \"0x1e334aB48EA46ca6D8E9e1078839b372706baC77\";\r\n\r\nconst abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"manager\",\r\n    outputs: [{ name: \"\", type: \"address\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"pickWinner\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"getPlayers\",\r\n    outputs: [{ name: \"\", type: \"address[]\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"enter\",\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"\", type: \"uint256\" }],\r\n    name: \"players\",\r\n    outputs: [{ name: \"\", type: \"address\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n];\r\n\r\nexport default new web3.eth.Contract(abi, address);\r\n","import { useEffect, useState } from \"react\";\r\nimport lottery from \"./lottery\";\r\nimport web3 from \"./web3\";\r\nimport {\r\n  Container,\r\n  Menu,\r\n  Header,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  Divider,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\n\r\nconst { ethereum } = window;\r\nconst App = () => {\r\n  const [manager, setManager] = useState(\"\");\r\n  const [players, setPlayers] = useState([]);\r\n  const [balance, setBalance] = useState(\"\");\r\n  const [value, setValue] = useState(\"\");\r\n  const [walletConnected, setWalletConnected] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setMessage(\"\");\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (value) {\r\n        setMessage(\"Waiting on transaction success...\");\r\n        await lottery.methods.enter().send({\r\n          from: accounts[0],\r\n          value: web3.utils.toWei(value, \"ether\"),\r\n        });\r\n        setMessage(\"You have entered!\");\r\n      }\r\n    } catch (err) {\r\n      setMessage(err.message);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    setMessage(\"\");\r\n    try {\r\n      const accounts = await web3.eth.getAccounts();\r\n      setMessage(\"Waiting on transaction success...\");\r\n      await lottery.methods.pickWinner().send({\r\n        from: accounts[0],\r\n      });\r\n      setMessage(\"A winner has been picked!\");\r\n    } catch (err) {\r\n      setMessage(err.message);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    await ethereum.request({ method: \"eth_requestAccounts\" });\r\n    setWalletConnected(true);\r\n  };\r\n\r\n  const items = [\r\n    {\r\n      header: \"Manager\",\r\n      description: ` This contract is managed by ${manager}.`,\r\n      fluid: true,\r\n    },\r\n    {\r\n      header: \"Stats\",\r\n      description: ` There are currently\r\n       ${players.length} people entered, competing to\r\n        win ${web3.utils.fromWei(balance)} ether.`,\r\n      fluid: true,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const checkIfWalletConnected = async () => {\r\n      const accounts = await web3.eth.getAccounts();\r\n      if (accounts.length !== 0) {\r\n        setWalletConnected(true);\r\n      }\r\n    };\r\n    checkIfWalletConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const fetchedManager = await lottery.methods.manager().call();\r\n      setManager(fetchedManager);\r\n\r\n      const fetchedPlayers = await lottery.methods.getPlayers().call();\r\n      setPlayers(fetchedPlayers);\r\n\r\n      const fetchedBalance = await web3.eth.getBalance(lottery.options.address);\r\n      setBalance(fetchedBalance);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Menu fluid widths={1}>\r\n        <Menu.Item header>Lottery Contract</Menu.Item>\r\n      </Menu>\r\n      <Card.Group items={items} />\r\n      <Divider />\r\n      {walletConnected ? (\r\n        <div>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n              <Header size=\"medium\">Want to try your luck?</Header>\r\n              <label>Amount of ether to enter</label>\r\n              <input type=\"text\" value={value} onChange={handleChange} />\r\n            </Form.Field>\r\n            <Button type=\"submit\" primary>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n          <Divider />\r\n          <h4>Ready to pick a winner?</h4>\r\n          <Button onClick={handleClick} color=\"teal\">\r\n            Pick a winner\r\n          </Button>\r\n          <Divider />\r\n        </div>\r\n      ) : (\r\n        <Button onClick={connectWallet} color=\"green\">\r\n          Connect Wallet\r\n        </Button>\r\n      )}\r\n      <Message hidden={!message}>{message}</Message>\r\n    </Container>\r\n  );\r\n};\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}